{"version":3,"sources":["domain/rps/model/gesture.interface.js","domain/rps/constants.js","domain/rps/model/paper.js","domain/rps/model/rock.js","domain/rps/model/scissors.js","domain/rps/Runner.js","app/index.js","index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpfile":"3ee82a593b10c221b0b4a6162aef6a4f.map","sourcesContent":["'use strict';\n\nclass Gesture {\n  getResult(gesture) { // eslint-disable-line class-methods-use-this\n    throw new Error(`Not implemented, ${gesture} ignored`);\n  }\n}\n\nmodule.exports = Gesture;\n","'use strict';\n\nmodule.exports = {\n  RESULT_DRAW: 0,\n  RESULT_WIN: 1,\n  RESULT_LOSE: -1,\n};\n","'use strict';\n\nconst Gesture = require('./gesture.interface');\nconst constants = require('../constants');\n\nclass Paper extends Gesture {\n  getResult(gesture) { // eslint-disable-line class-methods-use-this\n    if (!(gesture instanceof Gesture)) {\n      throw new Error('Gesture unexpected type');\n    }\n    switch (gesture.constructor.name) {\n      case 'Rock':\n        return constants.RESULT_WIN;\n      case 'Paper':\n        return constants.RESULT_DRAW;\n      case 'Scissors':\n        return constants.RESULT_LOSE;\n      default:\n        throw new Error(`Gesture unexpected type, ${gesture.constructor.name}`);\n    }\n  }\n}\n\nmodule.exports = Paper;\n","'use strict';\n\nconst Gesture = require('./gesture.interface');\nconst constants = require('../constants');\n\nclass Rock extends Gesture {\n  getResult(gesture) { // eslint-disable-line class-methods-use-this\n    if (!(gesture instanceof Gesture)) {\n      throw new Error('Gesture unexpected type');\n    }\n    switch (gesture.constructor.name) {\n      case 'Rock':\n        return constants.RESULT_DRAW;\n      case 'Paper':\n        return constants.RESULT_LOSE;\n      case 'Scissors':\n        return constants.RESULT_WIN;\n      default:\n        throw new Error(`Gesture unexpected type, ${gesture.constructor.name}`);\n    }\n  }\n}\n\nmodule.exports = Rock;\n","'use strict';\n\nconst Gesture = require('./gesture.interface');\nconst constants = require('../constants');\n\nclass Scissors extends Gesture {\n  getResult(gesture) { // eslint-disable-line class-methods-use-this\n    if (!(gesture instanceof Gesture)) {\n      throw new Error('Gesture unexpected type');\n    }\n    switch (gesture.constructor.name) {\n      case 'Rock':\n        return constants.RESULT_LOSE;\n      case 'Paper':\n        return constants.RESULT_WIN;\n      case 'Scissors':\n        return constants.RESULT_DRAW;\n      default:\n        throw new Error(`Gesture unexpected type, ${gesture.constructor.name}`);\n    }\n  }\n}\n\nmodule.exports = Scissors;\n","'use strict';\n\nconst Paper = require('./model/paper');\nconst Rock = require('./model/rock');\nconst Scissors = require('./model/scissors');\n\nclass Runner {\n  constructor() {\n    this.gestures = [\n      new Paper(),\n      new Rock(),\n      new Scissors(),\n    ];\n  }\n\n  getGestures() {\n    return this.gestures;\n  }\n\n  getComputerGesture() {\n    const index = Math.floor(Math.random() * this.gestures.length);\n    // eslint-disable-next-line security/detect-object-injection\n    return this.gestures[index];\n  }\n\n  playComputerVsComputer() {\n    const gesture1 = this.getComputerGesture();\n    const gesture2 = this.getComputerGesture();\n\n    return {\n      gesture1,\n      gesture2,\n      result: this.play(gesture1, gesture2),\n    };\n  }\n\n  playPersonVsComputer(gesture1Input) {\n    let gesture1;\n    const gesture2 = this.getComputerGesture();\n    switch (gesture1Input) {\n      case 'paper':\n        gesture1 = new Paper();\n        break;\n      case 'rock':\n        gesture1 = new Rock();\n        break;\n      case 'scissors':\n        gesture1 = new Scissors();\n        break;\n      default:\n        gesture1 = gesture1Input;\n        break;\n    }\n\n    return {\n      gesture1,\n      gesture2,\n      result: this.play(gesture1, gesture2),\n    };\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  play(gesture1, gesture2) {\n    return gesture1.getResult(gesture2);\n  }\n}\n\nmodule.exports = Runner;\n","'use strict';\n\nconst RPSRunner = require('../domain/rps/Runner');\nconst constants = require('../domain/rps/constants');\n\nconst runner = new RPSRunner();\n\nclass App {\n  constructor() {\n    this.chooseGamePage = null;\n    this.chooseGesturePage = null;\n    this.loadingPage = null;\n    this.resultPage = null;\n    this.results = {};\n  }\n\n  init() {\n    this.mapInterface();\n    this.hookEvents();\n    this.showGameChanger();\n    return this;\n  }\n\n  hookEvents() {\n    const self = this;\n    document\n      .getElementById('gamePlayerVsComputer')\n      .addEventListener('click', (event) => {\n        event.preventDefault();\n        return self.showGestureChooser()\n          .then(gesture => Promise.all([gesture, self.showLoading()]))\n          .then(([gesture]) => self.showResult(runner.playPersonVsComputer(gesture)))\n          .catch(() => self.showGameChanger());\n      });\n    document\n      .getElementById('gameComputerVsComputer')\n      .addEventListener('click', (event) => {\n        event.preventDefault();\n        return self.showLoading()\n          .then(() => self.showResult(runner.playComputerVsComputer()))\n          .catch(() => self.showGameChanger());\n      });\n    document\n      .getElementById('reset')\n      .addEventListener('click', (event) => {\n        event.preventDefault();\n        self.showGameChanger();\n      });\n  }\n\n  mapInterface() {\n    this.chooseGamePage = document.getElementById('chooseGame');\n    this.chooseGesturePage = document.getElementById('chooseGesture');\n    this.loadingPage = document.getElementById('loading');\n    this.resultPage = document.getElementById('result');\n  }\n\n  showLoading() {\n    this.setDisplayOnClass('rps', 'none');\n    this.loadingPage.style.display = 'block';\n\n    return new Promise(resolve => setTimeout(resolve, 3000));\n  }\n\n  showResult(results) {\n    this.setDisplayOnClass('rps', 'none');\n    this.resultPage.style.display = 'block';\n\n    this.setDisplayOnClass('result__output', 'none');\n    this.setDisplayOnClass('result__image', 'none');\n    this.setDisplayOnClass(`result__image--left-${results.gesture1.constructor.name.toLowerCase()}`, 'block');\n    this.setDisplayOnClass(`result__image--right-${results.gesture2.constructor.name.toLowerCase()}`, 'block');\n\n    let resultId;\n    switch (results.result) {\n      case constants.RESULT_DRAW:\n        resultId = 'resultDraw';\n        break;\n      case constants.RESULT_WIN:\n        resultId = 'resultWin';\n        break;\n      case constants.RESULT_LOSE:\n        resultId = 'resultLose';\n        break;\n      default:\n        throw new Error('Bad result');\n    }\n\n    document.getElementById(resultId).style.display = 'flex';\n  }\n\n  setDisplayOnClass(className, display) { // eslint-disable-line class-methods-use-this\n    const elements = document.getElementsByClassName(className);\n    // eslint-disable-next-line no-param-reassign, function-paren-newline\n    Array.prototype.map.call(elements, (element) => { element.style.display = display; });\n  }\n\n  showGameChanger() {\n    this.setDisplayOnClass('rps', 'none');\n    this.chooseGamePage.style.display = 'block';\n  }\n\n  showGestureChooser() {\n    this.setDisplayOnClass('rps', 'none');\n    this.chooseGesturePage.style.display = 'block';\n\n    return new Promise((resolve) => {\n      const choices = document.getElementsByClassName('choose__choice');\n      let listeners = [];\n      listeners = Array.prototype.map.call(choices, element => element.addEventListener('click', () => {\n        Array.prototype.map.call(choices, (ele, index) => {\n          // eslint-disable-next-line security/detect-object-injection\n          ele.removeEventListener('click', listeners[index]);\n        });\n        resolve(element.id.toLowerCase().replace('choose', ''));\n      }));\n    });\n  }\n}\n\nmodule.exports = {\n  run: () => (new App()).init(),\n};\n","'use strict';\n\nconst app = require('./app/index');\n\n(() => {\n  document.addEventListener('DOMContentLoaded', () => {\n    app.run('rsp');\n  });\n})();\n"]}